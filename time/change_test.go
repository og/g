package gtime_test

import (
	is "github.com/matryer/is"
	gtime "github.com/og/x/time"
	"testing"
)

func TestStartOfSecond(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-12-19 11:11:11", "1992-12-19 11:11:00",},
			{"1992-12-19 11:11:00", "1992-12-19 11:11:00",},
			{"1992-12-19 11:11:01", "1992-12-19 11:11:00",},
			{"1992-12-19 11:11:59", "1992-12-19 11:11:00",},
			{"1992-12-19 11:11:58", "1992-12-19 11:11:00",},
		}
		for _,v := range testCase {
			tv := gtime.Parse(gtime.Second, v[0])
			is.Equal(gtime.StartOfSecond(tv).Format(gtime.Second), v[1])
			is.Equal(tv.Nanosecond(), 0)
		}
	}
}

func TestEndOfSecond(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-12-19 11:11:11", "1992-12-19 11:11:59",},
			{"1992-12-19 11:11:00", "1992-12-19 11:11:59",},
			{"1992-12-19 11:11:01", "1992-12-19 11:11:59",},
			{"1992-12-19 11:11:59", "1992-12-19 11:11:59",},
			{"1992-12-19 11:11:58", "1992-12-19 11:11:59",},
		}
		for _,v := range testCase {
			tv := gtime.Parse(gtime.Second, v[0])
			is.Equal(gtime.EndOfSecond(tv).Format(gtime.Second), v[1])
			is.Equal(tv.Nanosecond(), 0)
		}
	}
}

func TestStartOfMinute(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-12-19 11:00:11", "1992-12-19 11:00:00",},
			{"1992-12-19 11:01:11", "1992-12-19 11:00:00",},
			{"1992-12-19 11:02:11", "1992-12-19 11:00:00",},
			{"1992-12-19 11:58:11", "1992-12-19 11:00:00",},
			{"1992-12-19 11:59:11", "1992-12-19 11:00:00",},
		}
		for _,v := range testCase {
			is.Equal(gtime.StartOfMinute(gtime.Parse(gtime.Second, v[0])).Format(gtime.Second), v[1])
		}
	}
}

func TestEndOfMinute(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-12-19 11:01:11", "1992-12-19 11:59:59",},
			{"1992-12-19 11:02:11", "1992-12-19 11:59:59",},
			{"1992-12-19 11:03:11", "1992-12-19 11:59:59",},
			{"1992-12-19 11:58:11", "1992-12-19 11:59:59",},
			{"1992-12-19 11:59:11", "1992-12-19 11:59:59",},
		}
		for _,v := range testCase {
			is.Equal(gtime.EndOfMinute(gtime.Parse(gtime.Second, v[0])).Format(gtime.Second), v[1])
		}
	}
}


func TestStartOfHour(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-12-19 00:01:11", "1992-12-19 00:00:00",},
			{"1992-12-19 01:01:11", "1992-12-19 00:00:00",},
			{"1992-12-19 02:02:11", "1992-12-19 00:00:00",},
			{"1992-12-19 22:58:11", "1992-12-19 00:00:00",},
			{"1992-12-19 23:59:11", "1992-12-19 00:00:00",},
		}
		for _,v := range testCase {
			is.Equal(gtime.StartOfHour(gtime.Parse(gtime.Second, v[0])).Format(gtime.Second), v[1])
		}
	}
}

func TestEndOfHour(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-12-19 00:01:11", "1992-12-19 23:59:59",},
			{"1992-12-19 01:01:11", "1992-12-19 23:59:59",},
			{"1992-12-19 02:02:11", "1992-12-19 23:59:59",},
			{"1992-12-19 22:58:11", "1992-12-19 23:59:59",},
			{"1992-12-19 23:59:11", "1992-12-19 23:59:59",},
		}
		for _,v := range testCase {
			is.Equal(gtime.EndOfHour(gtime.Parse(gtime.Second, v[0])).Format(gtime.Second), v[1])
		}
	}
}

func TestStartOfDay(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-12-01 00:01:11", "1992-12-01 00:00:00",},
			{"1992-12-02 01:01:11", "1992-12-01 00:00:00",},
			{"1992-12-03 02:02:11", "1992-12-01 00:00:00",},
			{"1992-12-30 22:58:11", "1992-12-01 00:00:00",},
			{"1992-12-31 23:59:11", "1992-12-01 00:00:00",},
		}
		for _,v := range testCase {
			is.Equal(gtime.StartOfDay(gtime.Parse(gtime.Second, v[0])).Format(gtime.Second), v[1])
		}
	}
}

func TestEndOfDay(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-01-19 00:01:11", "1992-01-31 23:59:59",},
			{"1992-03-19 01:01:11", "1992-03-31 23:59:59",},
			{"1992-04-19 22:58:11", "1992-04-30 23:59:59",},
			{"1992-05-19 23:59:11", "1992-05-31 23:59:59",},
			{"1992-06-19 23:59:11", "1992-06-30 23:59:59",},
			{"1992-07-19 23:59:11", "1992-07-31 23:59:59",},
			{"1992-08-19 23:59:11", "1992-08-31 23:59:59",},
			{"1992-09-19 23:59:11", "1992-09-30 23:59:59",},
			{"1992-10-19 23:59:11", "1992-10-31 23:59:59",},
			{"1992-11-19 23:59:11", "1992-11-30 23:59:59",},
			{"1992-12-19 23:59:11", "1992-12-31 23:59:59",},

			// 各种闰月
			{"1952-02-19 02:02:11", "1952-02-29 23:59:59",},
			{"1956-02-19 02:02:11", "1956-02-29 23:59:59",},
			{"1960-02-19 02:02:11", "1960-02-29 23:59:59",},
			{"1964-02-19 02:02:11", "1964-02-29 23:59:59",},
			// 非闰月
			{"1965-02-19 02:02:11", "1965-02-28 23:59:59",},
			{"1967-02-19 02:02:11", "1967-02-28 23:59:59",},
		}
		for _,v := range testCase {
			is.Equal(gtime.EndOfDay(gtime.Parse(gtime.Second, v[0])).Format(gtime.Second), v[1])
		}
	}
}

func TestStartOfMonth(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-01-01 00:01:11", "1992-01-01 00:00:00",},
			{"1992-02-02 01:01:11", "1992-01-01 00:00:00",},
			{"1992-11-03 02:02:11", "1992-01-01 00:00:00",},
			{"1992-12-30 22:58:11", "1992-01-01 00:00:00",},
		}
		for _,v := range testCase {
			is.Equal(gtime.StartOfMonth(gtime.Parse(gtime.Second, v[0])).Format(gtime.Second), v[1])
		}
	}
}

func TestEndOfMonth(t *testing.T) {
	is := is.New(t)
	{
		testCase := [][]string{
			{"1992-01-19 00:01:11", "1992-12-31 23:59:59",},
			{"1992-03-19 01:01:11", "1992-12-31 23:59:59",},
			{"1992-04-19 22:58:11", "1992-12-31 23:59:59",},
			{"1992-05-19 23:59:11", "1992-12-31 23:59:59",},
			{"1992-06-19 23:59:11", "1992-12-31 23:59:59",},
			{"1992-07-19 23:59:11", "1992-12-31 23:59:59",},
			{"1992-08-19 23:59:11", "1992-12-31 23:59:59",},
			{"1992-09-19 23:59:11", "1992-12-31 23:59:59",},
			{"1992-10-19 23:59:11", "1992-12-31 23:59:59",},
			{"1992-11-19 23:59:11", "1992-12-31 23:59:59",},
			{"1992-12-19 23:59:11", "1992-12-31 23:59:59",},
		}
		for _,v := range testCase {
			is.Equal(gtime.EndOfMonth(gtime.Parse(gtime.Second, v[0])).Format(gtime.Second), v[1])
		}
	}
}